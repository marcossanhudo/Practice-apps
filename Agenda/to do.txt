## Macro
- With the app's current state, identify problems a user may have if he misunderstands the interface, or doesn't use the app correctly; write automated tests, and do manual tests. Some items to test:
- - Invalid, or blank, inputs in input fields.
- - Visual prominence of buttons.

--> The placement of the action confirmation button, and of the action cancellation button, in forms and warnings, might make them not visually prominent enough.
--> If the user opens a form or warning by accident, it would be ideal that he didn't have to parse through the entire component, before finding the button to cancel the component's action.
--> Input validation must be implemented, as well as indication of success and failure when receiving or submitting data.
--> Communication and server errors must be communicated to the user.

--> Agenda page {
	- Depending on screen height, having the invites section always present may make the user's events not visually prominent enough; however, it might be good to have the section always present, even when the user has no pending invites, as the user then has no reason to wonder about if he has any pending invites.
	- Events are not scheduled when only empty inputs are provided, but there's no feedback about how there are fields which are required.
	- Issue of pre-existing events being rerendered everytime the user adds a new event, must be fixed.
	- Using absolute dates for events happening later may make it harder for the user to grasp the time remaining before the event happens.
	- "Manage invitees" might be confusing if the user has added no invitees yet.
		- Using "Invite people" for when the event has zero invitees, and "Manage invitees" when the event has more, is changing the interface, which may be confusing.
	- Understanding what's "soon" or "later" may not be intuitive.
	- There's no feedback for when the user succesfully creates an event; the user is required to find the event in the list, which may be even harder, if the user does not understand the distinction between "soon" and "later".
}

--> Event page {
	- The link back to the homepage could be more visually prominent.
	- When event details are changed, and the user provides empty inputs, the inputs are accepted.
	- Using "Event" as a level 1 heading may be confusing, since the user might be expecting to see the event's name as the identification of the page; the only way the user is currently able to access this page is through clicking on the event in the agenda page, which means the user already knows he clicked on the event, so he's already expecting to be directed to something specific of the event.
	- The name "Edit" for the button that is meant to save the new details the user provided, can be a little confusing, since most other UI's will use that name for the button that starts the interaction, and then will use something like "Save" or "Save changes" for the confirmation of the edit.
		- Reusing the phrase "Edit details" may be better, since it can be interpreted as a reinforcement of the user's desire to make the edit.
	- When the user edits the place of the event in either event detail change form, the change is not reflect in the other form, which is to say that, when the user changes event details, the changes are not reflected in the whole of the page.
	- It may be bad to use primary buttons for the "edit details", "reschedule event", and "cancel event" actions, since users shouldn't necessarily be encouraged to take these actions.
	- It's ugly how the user has to either submit a place name starting with a lower case letter, or have the two first words of the place paragraph have capital initials.
	- The user is meant to be able to add extensive descriptions, such as lists of things; however, the input field for descriptions is tiny.
	- Since the description is meant to be longer, it may be better if it's clearly identified, instead of just being one more piece of information.
}

- Accessibility testing.

--> Visual deficiencies (namely: blindness; color blindness) {
	- Forms, and list elements that represent events, are not identified as such, when the user is using a screen reader, and cannot see the element borders.
	- Context changes (such as forms and warnings opening and closing) are not narrated by screen readers. On clicking buttons, a user who cannot see, and uses a screen reader, may be left clueless as to what the button, which opened or close the form or warning, did, especially if the user is new to the app.
	- Since context changes aren't making screen reading cursors move to the new context, moving to an opened form or warning is confusing, if the button which opened the form or warning had buttons or links after it, but before the opened element.
	- Having the cancel action button be at the end of its form or warning, may be good, since it forces the user to check that the element is not what is desired; that check, however, may become frustrating, if the user is already familiar with the app.
	- Issues with specific screen readers: {
		- When Windows Narrator reads dates from date input fields, or times from time input fields, it reads them character by character
		- Windows Narrator reads times character by character in paragraphs, if the time is written in the {HH:MMAM} format.
		- Windows Narrator narrates input labels twice; first when it reads the label, then again when it reads the input field.
		- When NVDA reads dates in paragraphs, it does not understand the format {YYYY-MM-DD} as a date.
		- Having buttons with same, or otherwise similar, titles, can be confusing if they're too near to each other.
		- When NVDA reads an event listing in the agenda page, it narrates the word link for each line of the list element.
	}
	- Warnings, when the user is using a screen reader, and cannot see the element borders, are only identified by the "Warning" heading; they're thus (probably) not programatically identifiable. 
	- Users who cannot see tones of blue (as happens for people with tritanopia) may have difficulty seeing elements identified by the color, especially on low screen brightnesses.
	- Users who cannot see any color (except grayscale colors) (as happens for people with achromatopsia) may have difficulty seeing elements identified by non-grayscale colors, especially on low screen brightnesses.
	- Users whose vision is less sensitive to color contrast, may have difficulty seeing elements at all, especially on low screen brightnesses.
	- List items that represent events in the homepage may be difficult to identify, when the user is not hovering over them, even for people without visual deficiencies, because of how little contrast there is between the item, and the background of the page.
}

--> The app uses written English to communicate information, which means it is inaccessible to people who don't know written English (be it because of social or economic reasons, or because of difficulties to learn), and it may be inaccessible to people who have dyslexia.

- Redesign app, according to findings according to the tests of the two previous items.
- Implement invitee management for event scheduling.
- Implement invitee management for event rescheduling.
- Implement invitee management for event detail reviewing.
- Specify the pending features in the specifications file.
- Specify the routine feature, and the significant dates feature.

## Micro
- Review spacing rules, especially those of the event page.
- For forms, warnings, and modals, implement ripple animations on item display.
- On mouse hover stop, implement the reverse of the animation for mouse hover.
- Organize styles: move what's global to the styleguide, move what's specific to the relevant page's stylesheet.
- Consider a bigger margin in all pages, so content is more centered.